{"version":3,"sources":["components/contactForm/ContactFormStyled.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","components/contactForm/ContactForm.js","redux/filter/filter-actions.js","components/filter/Filter.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/filter/filter-reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["ContactFormContainer","styled","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","fetchRequest","createAction","fetchSuccess","fetchError","addRequest","addSuccess","addError","deleteRequest","deleteSuccess","deleteError","axios","defaults","baseURL","getFilter","state","filter","getLoading","loading","getContacts","contacts","getFilteredContacts","createSelector","allContacts","console","log","contact","name","toLowerCase","includes","trim","ContactForm","number","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","some","alert","addNewContact","onSubmit","this","htmlFor","type","id","pattern","title","required","onChange","Component","connect","dispatch","inputData","post","then","data","catch","error","mapDispatchToProps","ContactListItemContainer","li","ContactListItem","deleteContact","className","onClick","ContactList","fetchContacts","isLoadingContacts","map","uuid","delete","a","get","App","createReducer","_","payload","rootReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22241c69.chunk.js","sourcesContent":["import styled from 'styled-components';\nexport const ContactFormContainer = styled.form`\n  width: 50vw;\n  padding: 16px;\n  border: 2px solid grey;\n  border-radius: 4px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const InputContainer = styled.input`\n  display: block;\n  min-width: 300px;\n  padding: 5px 10px;\n  margin-bottom: 15px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  :focus {\n    outline: none;\n    border: 3px solid lightblue;\n  }\n`;\n\nexport const LabelContainer = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 18px;\n`;\n\nexport const ButtonContainer = styled.button`\n  padding: 2px 10px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background-color: white;\n  font-size: 16px;\n  cursor: pointer;\n  transition-duration: 0.4s;\n  :hover {\n    background-color: lightblue;\n    color: white;\n    border-color: lightblue;\n  }\n`;\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const fetchRequest = createAction('contacts/fetchRequest');\nexport const fetchSuccess = createAction('contacts/fetchSuccess');\nexport const fetchError = createAction('contacts/fetchError');\n\nexport const addRequest = createAction('contacts/addRequest');\nexport const addSuccess = createAction('contacts/addSuccess');\nexport const addError = createAction('contacts/addError');\n\nexport const deleteRequest = createAction('contacts/deleteRequest');\nexport const deleteSuccess = createAction('contacts/deleteSuccess');\nexport const deleteError = createAction('contacts/deleteError');\n\nexport const deleteContact = createAction('contacts/Delete');\n\n// Решение до Redux Toolkit\n\n// export const addNewContact = payload => ({\n//   type: types.ADD,\n//   payload\n// });\n\n// export const deleteContact = payload => ({\n//   type: types.DELETE,\n//   payload\n// });\n","import axios from \"axios\";\nimport {\n  fetchRequest,\n  fetchSuccess,\n  fetchError,\n  addRequest,\n  addSuccess,\n  addError,\n  deleteRequest,\n  deleteSuccess,\n  deleteError,\n} from \"./contacts-actions\";\n\naxios.defaults.baseURL = \"https://61dd8a2df60e8f00176688eb.mockapi.io\";\n\nexport const fetchContacts = () => async (dispatch) => {\n  dispatch(fetchRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    console.log(data);\n\n    dispatch(fetchSuccess(data));\n  } catch (error) {\n    dispatch(fetchError(error));\n  }\n};\n\nexport const addNewContact = (inputData) => (dispatch) => {\n  dispatch(addRequest());\n  axios\n    .post(\"/contacts\", inputData)\n    .then(({ data }) => dispatch(addSuccess(data)))\n    .catch((error) => dispatch(addError(error)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(deleteRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteSuccess(id)))\n    .catch((error) => dispatch(deleteError(error)));\n};\n\n// export default {addNewContact, deleteContact};\n","export const getFilter = state => state.filter;\n","import {createSelector} from 'reselect';\nimport {getFilter} from '../filter/filter-selectors';\n\nexport const getLoading = state => state.loading;\nexport const getContacts = state => state.contacts;\n\n//Селектор до использования мемоизации (оставлено для примера)\n// export const getFilteredContacts = state => {\n//   console.log('Перерендер интерфейса');\n//   const allContacts = getContacts(state);\n//   const filter = getFilter(state);\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n//   );\n// };\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (allContacts, filter) => {\n    console.log('Перерендер интерфейса');\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {\n  ButtonContainer,\n  ContactFormContainer,\n  InputContainer,\n  LabelContainer\n} from './ContactFormStyled';\n\nimport {addNewContact, getContacts} from '../../redux/contacts';\n\nclass ContactForm extends Component {\n  state = {name: '', number: ''};\n\n  handleChange = event => {\n    this.setState({[event.target.name]: event.target.value});\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.props.contacts.some(contact => contact.name === this.state.name)) {\n      alert(`${this.state.name} is already in contacts.`);\n      return;\n    }\n\n    this.props.addNewContact({\n      name: this.state.name,\n      number: this.state.number\n    });\n  };\n\n  render() {\n    return (\n      <ContactFormContainer onSubmit={this.handleSubmit}>\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\n        <InputContainer\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={this.handleChange}\n          value={this.state.name}\n        />\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\n        <InputContainer\n          type=\"tel\"\n          id=\"number\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={this.handleChange}\n          value={this.state.value}\n        />\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\n      </ContactFormContainer>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addNewContact: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  // console.log('Contacts form - mapstate');\n  // console.dir(state);\n  return {\n    contacts: getContacts(state)\n  };\n};\n\n// Решение до Redux Toolkit, оставила для сравнения\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewContact: contact => dispatch(addNewContact(contact))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const handleChange = createAction('filter/handleChange');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\nimport {handleChange} from '../../redux/filter/filter-actions';\nimport {getFilter} from '../../redux/filter/filter-selectors';\n\nconst Filter = ({filter, handleChange}) => {\n  return (\n    <>\n      <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\n      <InputContainer\n        id=\"filter\"\n        type=\"text\"\n        onChange={event => {\n          return handleChange(event.target.value);\n        }}\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    filter: getFilter(state)\n  };\n};\n\nconst mapDispatchToProps = {\n  handleChange\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styled from 'styled-components';\n\nexport const ContactListItemContainer = styled.li`\n  margin-bottom: 10px;\n  .contactListItemText {\n    display: inline-block;\n    margin-right: 10px;\n    font-size: 18px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\nimport {ContactListItemContainer} from './ContactListItemStyled';\n\nconst ContactListItem = ({name, number, deleteContact}) => {\n  return (\n    <ContactListItemContainer>\n      <p className=\"contactListItemText\">\n        {name}: {number}\n      </p>\n      <ButtonContainer type=\"button\" onClick={deleteContact}>\n        Delete\n      </ButtonContainer>\n    </ContactListItemContainer>\n  );\n};\n\nContactListItem.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired\n};\n\nexport default ContactListItem;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {v4 as uuid} from 'uuid';\nimport {connect} from 'react-redux';\n\nimport ContactListItem from '../contactListItem/ContactListItem';\n\nimport {\n  deleteContact,\n  fetchContacts,\n  getFilteredContacts,\n  getLoading\n} from '../../redux/contacts';\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.props.isLoadingContacts && <h2>Loading...</h2>}\n        {this.props.contacts.map(contact => (\n          <ContactListItem\n            name={contact.name}\n            number={contact.number}\n            key={uuid()}\n            deleteContact={() => this.props.deleteContact(contact.id)}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nContactList.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired\n    })\n  )\n};\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getFilteredContacts(state),\n    isLoadingContacts: getLoading(state)\n  };\n};\n\nconst mapDispatchToProps = {deleteContact, fetchContacts};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import {Component} from 'react';\nimport ContactForm from './components/contactForm/ContactForm';\nimport Filter from './components/filter/Filter';\nimport ContactList from './components/contactList/ContactList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {\n  fetchRequest,\n  fetchSuccess,\n  fetchError,\n  addRequest,\n  addSuccess,\n  addError,\n  deleteRequest,\n  deleteSuccess,\n  deleteError\n} from './contacts-actions';\n\nconst initialState = [];\n\nexport const contacts = createReducer(initialState, {\n  [fetchSuccess]: (_, {payload}) => payload,\n  [addSuccess]: (state, {payload}) => [...state, payload],\n  [deleteSuccess]: (state, {payload}) => state.filter(({id}) => id !== payload)\n});\n\nexport const loading = createReducer(false, {\n  [fetchRequest]: () => true,\n  [fetchSuccess]: () => false,\n  [fetchError]: () => false,\n\n  [addRequest]: () => true,\n  [addSuccess]: () => false,\n  [addError]: () => false,\n\n  [deleteRequest]: () => true,\n  [deleteSuccess]: () => false,\n  [deleteError]: () => false\n});\n\n// Решение до Redux Toolkit\n// const contactsReducer = (state = initialState, {type, payload}) => {\n//   console.log({type, payload});\n//   switch (type) {\n// case types.ADD:\n//   return {\n//     ...state,\n//     contacts: [...state.contacts, {id: uuid(), ...payload}]\n//   };\n\n//     case types.DELETE:\n//       return {\n//         ...state,\n//         contacts: state.contacts.filter(contact => contact.id !== payload)\n//       };\n\n//     default:\n//       console.log(state);\n//       return state;\n//   }\n// };\n","import {createReducer} from '@reduxjs/toolkit';\nimport {handleChange} from './filter-actions';\n\nconst initialState = '';\nconst filter = createReducer(initialState, {\n  [handleChange]: (state, {payload}) => {\n    return payload;\n  }\n});\n\nexport default filter;\n","import {combineReducers} from 'redux';\nimport {contacts, loading} from './contacts/contacts-reducer';\nimport filter from './filter/filter-reducer';\n\nconst rootReducer = combineReducers({\n  contacts,\n  filter,\n  loading\n});\n\nexport default rootReducer;\n","import contactsReducer from './rootReducer';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }),\n  logger\n];\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter']\n// };\n\nconst store = configureStore({\n  reducer: contactsReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development'\n});\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n// import {PersistGate} from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}